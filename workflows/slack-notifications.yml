name: Slack Notifications
on:
  pull_request:
    types: [opened, review_approved, closed]
  pull_request_review:
    types: [submitted]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Determine the event type and set message
          EVENT_TYPE="${{ github.event.action }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"

          # Handle pull_request events
          if [ "$EVENT_TYPE" = "opened" ]; then
            MESSAGE="New PR #$PR_NUMBER created by $PR_AUTHOR in $REPO\n*Title*: $PR_TITLE\n*Link*: $PR_URL"
          elif [ "$EVENT_TYPE" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            MESSAGE="PR #$PR_NUMBER merged by $PR_AUTHOR in $REPO\n*Title*: $PR_TITLE\n*Link*: $PR_URL"
          elif [ "$EVENT_TYPE" = "review_approved" ]; then
            MESSAGE="PR #$PR_NUMBER approved in $REPO\n*Title*: $PR_TITLE\n*Link*: $PR_URL"
          elif [ "$EVENT_TYPE" = "submitted" ] && [ "${{ github.event.review.state }}" = "approved" ]; then
            REVIEWER="${{ github.event.review.user.login }}"
            MESSAGE="PR #$PR_NUMBER approved by $REVIEWER in $REPO\n*Title*: $PR_TITLE\n*Link*: $PR_URL"
          else
            exit 0 # Skip if event is not relevant
          fi

          # Send notification to Slack
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$MESSAGE\"}" $SLACK_WEBHOOK_URL
